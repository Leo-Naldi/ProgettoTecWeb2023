openapi: 3.0.3
info:
  title: Squealer Backend API
  description: |-
    Backend API for the Squealer Social Media application.
  contact:
    email: leonardo.naldi@studio.unibo.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local server for testing and debugging
tags:
  - name: users
    description: Operations dealing with users
  - name: channels
    description: Operations dealing with channels
  - name: messages
    description: Operations dealing with messages
  - name: debug
    description: Debugging endpoints that will not be present in the prod release.
paths:
  
  /users/:
    get:
      tags:
        - users
      description: Get all users. Filtering is strongly advised lmao.
      operationId: getUsers
      parameters:
        - name: page
          in: query
          description: To paginate results.
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: handle
          in: query
          description: Handle filter. If there's a perfect match the user will be returned, otherwise a list of users whose handle contains the given value.
          schema:
            type: string
            example: userhandle99
      security:
        - adminAuth: []
      responses:
        '200':
          description: Request successfull
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/User'
                    - $ref: '#/components/schemas/UserPro'
        '401':
          description: Unauthorized operation

  /users/{handle}:
    put:
      tags:
        - users
      description: Create a new user with the selected handle. It will return the user object and the token used for all further authorized comunication.
      operationId: createUser
      requestBody:
        description: New user
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      parameters:
        - name: handle
          in: path
          description: The new user's Handle
          required: True
          schema: 
            type: string
            example: userHandle123
      responses:
        '200':
          description: User Created, the JWT token is in the body.
          content:
            application/json:
              schema:
                allOf:
                  - anyOf:
                    - $ref: '#/components/schemas/User'   
                    - $ref: '#/components/schemas/UserPro'   
                  - $ref: '#/components/schemas/TokenInfo'   
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle or email
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    invalid: 
                      type: array
                      description: A list of data that was invalid
                      items:
                        type: string
                        enum:
                          - handle
                          - email
                      minItems: 1
                      
    delete:
      tags:
        - users
      description: Delete the user with the given handle
      operationId: deleteUser
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
      security:
        - adminAuth: []
        - userAuth: []
      responses:
        '200':
          description: User Deleted
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    get:
      tags:
        - users
      description: Get the user with the given handle
      operationId: getUser
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
      security:
        - adminAuth: []
        - userAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/UserPro'
        '401':
          description: Unauthorized operation.
        '409':
          description: Invalid handle
    post:
      tags:
        - users
      description: Change user object. A user account will only be able to modify his own password or email, an admin can also change remaining characters.
      operationId: writeUser
      requestBody:
        description: Data to be modified
        required: True
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/UserInfo'
                - $ref: '#/components/schemas/UserTypes'
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
      responses:
        '200':
          description: User changed
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/UserPro'
        '401':
          description: Unauthorized operation. To promote a user to admin one needs to provide an admin token, to set the smm one needs to be a pro user.
        '409':
          description: Invalid handle
          
  /users/{handle}/login:
    post:
      tags:
        - users
      description: Login endpoint, will return the jwt in the body.
      operationId: userLogin
      requestBody:
        description: The user's password
        required: True
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  format: password
                  description: The user's password
                  minLength: 6
                  example: iloveyou1234
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
            
      responses:
        '200':
          description: Request successfull. The JWT is in the body.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/TokenInfo'
                  
  /user/{handle}/messages/:
    get:
      tags:
        - users
        - messages
      description: Get all the messages of a specific user
      operationId: getUserMessages
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
        - name: channel
          in: query
          description: Channel Filter
          required: False
          schema:
            type: string
            description: The channel name
        - name: from
          in: query
          description: Only get messages from given date onwards
          required: False
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Only get messages up until given date
          required: False
          schema:
            type: string
            format: date-time
        - name: popular
          in: query
          description: Get only popular messages. If used together with controversial and/or unpopular it will perform an or.
          required: False
          schema:
            type: boolean
        - name: controversial
          in: query
          description: Get only controversial messages. If used together with popular and/or unpopular it will perform an or.
          required: False
          schema:
            type: boolean
        - name: unpopular
          in: query
          description: Get only unpopular messages. If used together with controversial and/or popular it will perform an or.
          required: False
          schema:
            type: boolean
        - name: top
          in: query
          description: Get messages with the most positive reactions. Value decides time frame, values of from and to will be ignored if this field is set.
          required: False
          schema:
            type: string
            enum:
              - today
              - week
              - month
              - year
              - all
        - name: page
          in: query
          description: For result pagination, not sure if it should be mandatory/have a default.
          required: False
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    post:
      tags:
        - users
        - messages
      description: Post a new Message
      operationId: postUserMessage
      security:
        - adminAuth: []
        - userAuth: []
      requestBody:
        description: message to be posted
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInfo'
                
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
      responses:
        '200':
          description: Message posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
          
    delete:
      tags:
        - users
        - messages
      description: Delete all messages from the user with the given handle
      operationId: deleteUserMessages
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
      responses:
        '200':
          description: Messages Deleted
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    
  /user/{handle}/messages/{id}:
  
    delete:
      tags:
        - users
        - messages
      description: Delete the message with the given id from the user with the given handle.
      operationId: deleteMessage
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
        - name: id
          in: path
          description: The message's id
          required: True
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Message Deleted
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    post:
      tags:
        - users
        - messages
      description: Change message data. 
      operationId: postMessage
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: handle
          in: path
          description: The user's handle
          required: True
          schema: 
            type: string
            example: userHandle123
        - name: id
          in: path
          description: The message's id
          required: True
          schema:
            type: integer
            format: int64
      requestBody:
        required: True
        description: The data to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageImpressions'
      responses:
        '200':
          description: Message Modified
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
  
  /channels/:
    get:
      tags:
        - channels
      parameters:
        - name: page
          in: query
          description: To paginate results
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: owner  # optional, it will be imoplemented if there's time left
          in: query
          description: Filter by owner's Handle. If no channel owned by a user with handle is found it will return an empty array
          schema:
            type: string
            example: owner333
        - name: postCount  # optional, it will be imoplemented if there's time left
          in: query
          description: Only get channels with at least the given number of messages
          schema:
            type: integer
            minimum: 0
            example: 5000
        - name: popular  # optional, it will be imoplemented if there's time left
          in: query
          description: Only get channels with at least the given number of popular messages
          schema: 
            type: integer
            minimum: 1
            example: 100
      description: Get all channels.
      operationId: getChannels
      responses:
        '200':
          description: Valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '401':
          description: Unauthorized operation
  
  /channels/{name}:
    put:
      tags:
        - channels
      description: Create a new channel with the given name.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: name
          in: path
          description: The new Channel's name
          required: True
          example: channelAboutMountainPictures88
          schema:
            type: string
            minLength: 6
      requestBody:
        required: True
        description: The new channel's data. The description will be automatically generated if missig
        content:
          application/json: 
            schema:
              type: object
              required: [owner]
              properties:
                owner:
                  type: string
                  description: The owner's handle
                  example: ownerHandle777
                description:
                  type: string
                  description: The channel's description
                  example: This is a channel about how javascript is a great programming language and not     at all a meme
      responses:
        '200':
          description: Channel Created Successfully
        '401':
          description: Unauthorized operation.
        '409':
          description: Channel name already taken.
    post:
      tags:
        - channels
      description: Change channel data, must be either the owner or an admin.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: name
          in: path
          description: The new Channel's name
          required: True
          example: channelAboutMountainPictures88
          schema:
            type: string
            minLength: 6
      requestBody:
        required: True
        description: The data to be changed.
        content:
          application/json: 
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: The channel's description
                  example: This is a channel about how javascript is a great programming language and not     at all a meme
      responses:
        '200':
          description: Channel Changed Successfully
        '401':
          description: Unauthorized operation.
        '409':
          description: Channel name already taken.
    delete:
      tags:
        - channels
      description: Delete given channel.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: name
          in: path
          required: True
          description: The channel's name.
          schema:
            type: string
            example: awesomeChannel9000
      responses:
        '200': 
          description: Channel Deleted.
        '401':
          description: Unauthorized operation (only the logged in owner or an admin can delete channels)
        '409':
          description: No channel with the given name
  /channels/{name}/available:
    get:
      tags:
        - channels
      description: Returns 200 if there is no channel with the given name, 400 otherwise.
      parameters:
        - name: name
          required: True
          in: path
          description: The name whose availability we want to check
          schema:
            type: string
            example: canIUseThisName99
      responses:
        '200':
          description: Name available
        '400':
          description: Name already taken
          
  /messages/:
  
    get:
      tags:
        - messages
      description: Get all messages. Pagination and/or filtering is strongly advised. Some functions currently overlap with /users/handle/messages endpoint.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: page
          in: query
          description: To paginate results
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: sender
          in: query
          description: Filter by sender's handle, if there's no user whose handle is a perfect match, it will return the messages of the users whose handle contains the given one.
          schema:
            type: string
            example: hand
        - name: from
          in: query
          description: Only get messages from given date onwards
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Only get messages up until given date
          schema:
            type: string
            format: date-time
        - name: dest
          in: query
          description: Filter messages by destination, user handles will need to be prefixed with an @, channel names with an §.
          schema:
            type: array
            items:
              type: string
            example: ['@gianni', '@alberto', '§canalebello']
            minItems: 1
      responses:
        '200':
          description: Request Successfull. Notice that if filters produce an empty result, this status code with an empty array as res.body will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized operation
  /messages/{id}:
  
    delete:
      tags:
        - messages
      description: Delete given message.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: id
          in: path
          description: The message's id
          required: True
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Message Deleted
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    post:
      tags:
        - messages
      description: Change message data. Currently, admins can add recievers, positive/negative reaction counts.
      security:
        - adminAuth: []
        - userAuth: []
      parameters:
        - name: id
          in: path
          description: The message's id
          required: True
          schema:
            type: integer
            format: int64
      requestBody:
        required: True
        description: The data to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageImpressions'
      responses:
        '200':
          description: Message Modified
        '401':
          description: Unauthorized operation
        '409':
          description: Invalid handle
    
components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/UserHandle'
        - $ref: '#/components/schemas/UserInfo'
        - $ref: '#/components/schemas/UserTypes'
        
    UserPro:
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/SMMData'
        - type: object
          required: [subscription]
          properties:
            subscription:
              type: object
              required: [subscribed, expires, price]
              properties:
                subscribed:
                  type: string
                  format: date
                  description: The user's subscription date
                expires:
                  type: string
                  format: date
                  description: The expiry date
                price:
                  type: number
                  format: float
                  description: Subscription's price
            
    Message:
      allOf:
        - $ref: '#/components/schemas/MessageInfo'
        - $ref: '#/components/schemas/MessageImpressions'
        - type: object
          required: [id]
          properties:
            id:
              type: integer
              format: int64
              description: The message's numerical id
    Channel:
      type: object
      required: [name, created, owner]
      properties:
        name: 
          type: string
          example: AwesomeChannel42
        created:
          type: string
          format: date-time
          description: Channel's creation timestamp
          example: "2021-01-30T08:30:00Z"
        owner:
          type: string
          description: Owner's Handle
          example: channel3Owner
        description: 
          type: string
          description: A brief description of the channel
          example: This is a channel dedicated to pictures of fluffy kittens
        members:
          type: array
          items:
            type: object
            properties:
              hanlde:
                type: string
                description: Member's Handle
                example: giangiovanni99
              joined:
                type: string
                format: date-time
                description: Date of user joining
                example: "2021-01-30T08:30:00Z"
    UserHandle:
      type: object
      properties: 
        handle:
          type: string
          description: User's unique handle
          example: userHandle123
      required: [handle]
    UserInfo:
      type: object
      properties:
        email:
          type: string
          format: email
          example: giovanni@gmail.com
        password:
          type: string
          format: password
          example: supersafepassword123
          minLength: 6
      required: [email, password]
    UserTypes:
      type: object
      properties:
        type:
          type: string
          enum:
            - user
            - pro
            - admin
      required: [type]
    MessageImpressions:
      type: object
      required: [viewed, reactions]
      properties:
        viewed:
              type: integer
              description: Number of time the message has been viewed
              minimum: 0
        reactions:
          type: object
          required: [positive, negative]
          description: Bookkeeping data on reactions
          properties:
            positive:
              type: object
              description: Numbers of positive reactions divided by types
              properties:
                agree:
                  type: integer
                  minimum: 0
                strongAgree: 
                  type: integer
                  minimum: 0
            negative:
              type: object
              description: Numbers of negative reactions divided by types
              properties:
                disagree:
                  type: integer
                  minimum: 0
                strongDisagree: 
                  type: integer
                  minimum: 0
            
    MessageInfo:
      type: object
      required: [content, posted, author, dest]
      properties:
        content:
          type: object
          properties:
            
            text: 
              type: string
              example: This is an example squeal that contains very interesting info.
            image:
              type: string
              format: binary
              description: An image
        posted:
          type: string
          description: Message's timestamp
          format: date-time
          example: "2021-01-30T08:30:00Z"
        author:
          type: string
          description: The author's handle
          example: pieraldo196
        dest:
          type: array
          items:
            type: string
            description: The handle for single individuals, the channel name for channels
          example: ['@gianni', '@alberto', '§canalebello']
    TokenInfo:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: The JWT token
          format: byte
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    SMMData:
      type: object
      properties:
        smm:
          type: string
          description: The SMM's handle
          example: smmHandle4
        managing:
          type: array
          description: The list of users the user is managing as an SMM.
          items: 
            type: string
          example: giovannib5
            
  
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires Requires a JWT token generated with user credentials. Even with a correctly formed JWT, a user can only alter their own account.
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires a JWT token generated with admin credentials.
