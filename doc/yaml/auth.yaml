openapi: 3.0.3
info:
  title: "Squealer Authentication"
  description: "Backend API for authentication"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: "Login"
- name: "Refresh"
- name: "Logout"

paths:
  /auth/login:
    post:
      tags:
        - Login
      description: App Login Endpoint
      operationId: login
      requestBody:
        description: user's mail and password
        required: True
        content:
          application/json:
            schema:
              type: object
              required: [ handle, password ]
              properties:
                handle:
                  type: string
                  example: UserA
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: gTT33%2?
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/LoginResponse"
        '401':
          description: "Handle or password were incorrect"

  /auth/login/admin:
    post:
      tags:
        - Login
      description: Administrator Login Endpoint
      operationId: loginAdmin
      requestBody:
        description: Admin's mail and password
        required: True
        content:
          application/json:
            schema:
              type: object
              required: [ handle, password ]
              properties:
                handle:
                  type: string
                  example: UserA
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: gTT33%2?
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/LoginResponse"
        '401':
          description: "Handle or password were incorrect"

  /auth/login/smm:
    post:
      tags:
        - Login
      description: SMM Dashboard Login Endpoint
      operationId: loginPro
      requestBody:
        description: Pro user's mail and password
        required: True
        content:
          application/json:
            schema:
              type: object
              required: [ handle, password ]
              properties:
                handle:
                  type: string
                  example: UserA
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: gTT33%2?
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/LoginResponse"
        '401':
          description: "Handle or password were incorrect"
    
  /auth/refresh:
    post:
      tags:
        - "Refresh"
      description: "Issue a new token before the current one expires"
      operationId: refreshToken
      responses:
        '200':
          description: "Token rinnovati"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '401':
          description: "Invalid Token"
        '500':
          description: "server-side error"         

    

components:
  schemas:
    LoginResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
        user:
          $ref: '#/components/schemas/User'
    Token: 
      type: string
      description: The JWT token. Expires in 7 days.
      format: byte
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    User:
      allOf:
        - $ref: '#/components/schemas/UserHandle'
        - $ref: '#/components/schemas/UserInfo'
        - $ref: '#/components/schemas/AdminPriviledges'
    UserPro:
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/SMMData'
        - type: object
          required: [subscription]
          properties:
            subscription:
              type: object
              required: [subscribed, expires, price]
              properties:
                subscribed:
                  type: string
                  format: date
                  description: The user's subscription date
                expires:
                  type: string
                  format: date
                  description: The expiry date
                price:
                  type: number
                  format: float
                  description: Subscription's price
    UserHandle:
      type: object
      properties: 
        handle:
          type: string
          description: User's unique handle
          example: userHandle123
      required: [handle]
    UserInfo:
      type: object
      properties:
        email:
          type: string
          format: email
          example: giovanni@gmail.com
        password:
          type: string
          format: password
          example: supersafepassword123
          minLength: 6
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        picture:
          type: string
        gender:
          type: string
        phone:
          type: string
        accountType:
          type: string
          enum:
            - user 
            - pro
        blocked:
          type: boolean
      required: [username, email, name, surname, accountType, blocked]
    AdminPriviledges:
      type: object
      properties:
        admin:
          type: boolean
      required: [admin]
    TokenInfo:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: The JWT token
          format: byte
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    SMMData:
      type: object
      properties:
        smm:
          type: string
          description: The SMM's handle
          example: smmHandle4
        managing:
          type: array
          description: The list of users the user is managing as an SMM.
          items: 
            type: string
          example: giovannib5
    WritableUserData:
      type: object
      properties:
        username: 
          type: string 
          description: The new username.
        email: 
          type: string 
          description: The new email.
        password: 
          type: string 
          format: password
          description: The new password.
        name: 
          type: string 
          description: The new name.
        lastName: 
          type: string 
          description: The new last name.
        phone: 
          type: string 
          description: The new phone number.
        gender: 
          type: string 
          description: The new gender.
        blocked: 
          type: boolean
          description: The blocked status.
        accountType: 
          type: string 
          description: The new account type.
          enum:
            - user 
            - pro
        charLeft: 
          type: object 
          description: The user's character quota, only an admin can set this.
          properties:
            day:
              type: number
              minimum: 0
            week:
              type: number
              minimum: 0
            month:
              type: number
              minimum: 0
        addJoinedChannels: 
          type: array
          items:
            type: string 
            description: The channel's name
          description: Array of channel names to add to the user's joined channels.
            channels that are already joined will be ignored.
        removeJoinedChannels: 
          type: array
          items:
            type: string 
            description: The channel's name
          description: Array of channel names to remove from the user's joined channels.
            channels that are not joined will be ignored.
            
  
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires Requires a JWT token generated with user credentials. Even with a correctly formed JWT, a user can only alter their own account.
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires a JWT token generated with admin credentials.      